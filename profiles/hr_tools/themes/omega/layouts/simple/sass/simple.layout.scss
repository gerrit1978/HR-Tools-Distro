/*******************************************************************************
 * _layout.scss
 *
 * Styling of the "simple" layout demonstrating the Compass grid extension Susy
 * and building mobile first layouts.
 ******************************************************************************/
@import "susy";

/*
 * Variables
 **********************************/
/**
 * Set consistent vertical and horizontal spacing units.
 */
$vert-spacing-unit: 20px;
$horz-spacing-unit: 1.2em;

/**
 * Define Susy grid variables mobile first.
 */
$total-columns: 4;
$column-width: 4em;
$gutter-width: 1em;
$grid-padding: 5px;

$container-style: magic;
$container-width: 1200px;

// Susy Media Layouts @see http://susy.oddbird.net/guides/reference/#ref-media-layouts
$tab: 44em 12; // At 44em use 12 columns.
$desk: 70em 16; // At 70em use 16 columns.

.header,
.main,
.footer {
  @include container; // Define these elements as the grid containers.
  // @include susy-grid-background; // Show the columns for debugging.
  margin-bottom: $vert-spacing-unit;
}

@include at-breakpoint($tab) { // At a given Susy Media Layout, use a given amount of columns.
  .header,
  .main,
  .footer {
    @include set-container-width; // Reset only the container width (elements have already been declared as containers).
    // @include susy-grid-background; // Show the columns for debugging.
  }

  .branding {
    @include span-columns(4, 12); // Span 4 out of 12 columns.
  }
  .region-header{
    @include span-columns(8 omega, 12); // Span the last (omega) 8 columns of 12.
  }
  .region-navigation {
    clear: both;
  }

  .sidebar-first,
  .sidebar-second,
  .two-sidebars {
    [role="main"] {
      @include span-columns(8, 12); // Span 8 out of 12 columns.
    }
    .region-sidebar-first,
    .region-sidebar-second {
      @include span-columns(4 omega, 12); // Span the last (omega) 4 columns of 12.
    }
    .region-sidebar-second {
      clear: right;
    }
  }
}

@include at-breakpoint($desk) {
  .header,
  .main,
  .footer {
    @include set-container-width; // Reset only the container width (elements have already been declared as containers).
    // @include susy-grid-background; // Show the columns for debugging.
  }

  .branding {
    @include span-columns(6, 16); // Span 6 out of 16 columns.
  }
  .region-header{
    @include span-columns(10 omega, 16); // Span the last (omega) 10 columns of 16.
  }

  .sidebar-first {
    [role="main"] {
      @include span-columns(12 omega, 16); // Span the last (omega) 12 columns of 16.
    }
    .region-sidebar-first {
      @include span-columns(4, 16); // Span 4 out of 16 columns.
    }
  }
  .sidebar-second {
    [role="main"] {
      @include span-columns(12, 16); // Span 12 out of 16 columns.
    }
    .region-sidebar-second {
      @include span-columns(4 omega, 16); // Span the last (omega) 12 columns of 16.
      clear: none;
    }
  }

  .two-sidebars {
    [role="main"] {
      @include span-columns(8, 16); // Span 12 out of 16 columns.
      @include push(4, 16);  // Push element by adding 4 out of 16 columns of left margin.
    }
    .region-sidebar-first,
    .region-sidebar-second {
      @include span-columns(4, 16); // Span 4 out of 16 columns.
    }
    .region-sidebar-first {
      @include pull(12, 16); // Pull element by adding 12 out of 16 columns of negative left margin.
    }
    .region-sidebar-second {
      @include omega; // This element spans the last (omega) column.
      clear: none;
    }
  }
}
